# -*- coding: utf-8 -*-
"""5_DataPreprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MIeZaNqTmYEnAZfgZQ_2WAPOdu4tNY2R

# **데이터 전처리**
- 모델링하기 적합한 데이터로 변환하는 작업
- sklearn, preprocessing 패키지를 많이 이용
- numpy, pandas로도 가능

**1.결측치 추정**: 
- 결측치가 많을 경우 해당 데이터를 제외하거나 20% 미만일 경우 다른 값으로 대체<br>
1)연속형 : 이상치를 제외하고 평균<br>
2)범주형 : Null 값을 미리 정의된 다른 값으로 대체


**2.레이블 인코딩**
문자를 숫자로 변환하는 것
- 원핫인코딩
>- 예를 들어 변수의 값이 male, female이라면 1, 2로 바꾸게 되면 가중치를 갖게 되므로 두 개의 변수를 추가(1, 0)
>- 인식률이 좋아짐
- 평균값 인코딩

**3.표준화**
- 최대값과 최소값을 정하고 모든 데이터의 값이 그 안으로 들어오도록 조정
- 연속형 데이터의 경우 모든 데이터간에 Scale이 다르면 모델링이 제대로 수행되지 않기 때문에 표준화를 하는 것이 좋다

**4.구간화**
- 연속형 데이터를 범주형으로 바꾸는 것
- 연속형 데이터가 산재되어 있을 경우 일정 규칙에 맞추어 범주형으로 변환하게 되면 데이터에 의미를 부여할 수 있다.
- 예) 나이 -> 20, 30 등으로 바꿈

## **표준화 함수들**
- sklearn, preprocessing 모듈 내에 표준화 함수들이 존재
>- scale(x): 표준 정규분포를 사용해 표준화
>- robust_scale(x): 중위수(median)와 사분위범위(interquartile range)를 사용해서 표준화
>- minmax_scale(x): 최댓값(1), 최솟값(0) 사이에 데이터가 들어오도록 표준화
>- maxabs_scale(x): -1 ~ 1 사이에 데이터가 들어오도록 표준화
"""

import seaborn as sns
iris = sns.load_dataset("iris")
iris

#독립변수, 종속변수를 분리
X = iris.iloc[:, :-1]
X

# scale()을 이용해서 데이터를 표준화 : 평균 0, 표준편차 1이 되도록 표준화

from sklearn.preprocessing import scale

x_scaled = scale(X) # numpy로 변경되어 리턴
x_scaled[:5, :]

x_scaled.mean(axis= 0)

for scaled_mean in x_scaled.mean(axis=0):
  print("{:10.9f}".format(scaled_mean))

x_scaled.std(axis=0)

# minmax_scale() : 최솟값을 0, 최댓값을 1
from sklearn.preprocessing import minmax_scale
x_minmax_scaled = minmax_scale(X)
x_minmax_scaled[:5, :]

# maxabs_scale() : 절대값 중 가장 큰 값을 1로 정하고 0~1로 값을 매핑
# 음수는 부호를 그대로 유지
from sklearn.preprocessing import maxabs_scale
x_maxabs_scaled = maxabs_scale(X)
x_maxabs_scaled[:5, :]

# maxabs_scale() / minmax_scale() 리뷰

import numpy as np
data_X = np.array([[1., -1., 2.],
                  [2., 0., 0.],
                  [0., 1., -1.]])

data_X

minmax_scale(data_X)

maxabs_scale(data_X)

"""##**스케일과 스케일백**
- StandardScaler, MinMaxScaler, MaxAbsScaler 클래스를 이용해서 표준화
- 이 클래스들을 이용하면 표준화한 후 그 값을 이용해서 원래 값으로 되돌릴 수 있다.
- 중요한 함수
>- fit()
>- transform()
>- fit-transform()
>- inverse-transform()

##**Z-점수 = (X - 평균) / 표준편차**
- [예]
- A SAT 1800 (2400): Z점수 1
- SAT 평균 1500, 표준편차 300 
- B ACT 24   (36): Z점수 0.6
- ACT 평균 22, 표준편차 5
"""

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
sc.fit(X)
iris_scaled = sc.transform(X)
iris_scaled[:5, :]

iris_scaled.mean(axis=0)

iris_scaled.std(axis=0)

# 역 표준화
iris_origin = sc.inverse_transform(iris_scaled)
iris_origin[:5, :]

X.head() #앞 5개

"""## **Label Encoding**
- 레이블 인코딩이란? 문자를 숫자로(0 ~ K-1)로 변환하는 것
- 도시명, 성별 데이터와 같이 문자데이터를 숫자로 변환 
- sklearn.preprocessing 모듈 내에 LabelEncoder 클래스가 존재
- 함수
> - fit() : 인코더 모델 생성
> - fit_transform() : 인코딩된 레이블을 반환한다.
> - inverse_transform() : 원래 값으로 디코딩
"""

# 모듈 임포트하기

from sklearn.preprocessing import LabelEncoder

import seaborn as sns
iris = sns.load_dataset("iris")
iris

le = LabelEncoder()

le.fit_transform(iris.species) #ndarry로 리턴

le.classes_  #레이블된 속성을 확인

le.inverse_transform([0, 1, 2])

"""## **One hot Encoding**
- 클래스의 수만큼 열을 생성하여 0과 1의 값만 가지도록 함. 즉 0, 1로만 데이터를 표현
- 성별을 저장하는 변수가 male, female의 값을 가지고 있는 경우 열의 이름이 gender라면 gender_male, gender_female 이라는 두 개의 변수가 더 추가
- sklearn.preprocessing 모듈에 OneHotEncoder라는 클래스를 이용
- pandas의 get_dummies()라는 함수를 사용해도 된다.
"""

from sklearn.preprocessing import OneHotEncoder

import seaborn as sns
iris = sns.load_dataset("iris")
iris

enc = OneHotEncoder()

species = iris.species.to_numpy()

enc.fit(species.reshape(-1, 1)) # 1열로 만들기

iris_onehot = enc.transform(species.reshape(-1, 1))
iris_onehot # 희소 행렬로 변환

iris_onehot.toarray()[:5]

# One hot Encoding -> Pandas에서 제공하는 get_dummies()라는 함수를 이용해도 가능하다.

import pandas as pd

pd.get_dummies(iris.species)

