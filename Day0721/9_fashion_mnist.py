# -*- coding: utf-8 -*-
"""9_Fashion_MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kB_A_qinDQzqY_5g6YTmeXjzxVtOWs-5
"""

!pip install tensorflow-gpu==2.2.0

# 패키지 불러오기

import numpy as np

from keras.datasets import fashion_mnist
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D, MaxPool2D, Dropout, Flatten, Dense

# 이미지의 폭과 너비를 지정

width = 28
height = 28

# dataset 가져오기
(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()

X_train.shape, y_train.shape, X_test.shape, y_test.shape

# y_train의 데이터(숫자)를 해당하는 문자열을 가진 label로 매칭

labels = ['t-shirt', 'trouser', 'pullover', 'dress', 'coat', 'sandal', 'shirt', 'sneaker', 'bag', 'ankle-boot']
labels[y_train[0]]

# 그림으로 출력해보기
import matplotlib.pyplot as plt
plt.imshow(X_train[3])
plt.title("Correct : " + labels[y_train[3]])
plt.show()

# 데이터 스케일링 + float32 타입으로 타입 변환 +  reshape

X_train = X_train.reshape(60000, width, height, 1).astype('float32') / 255.0
X_test = X_test.reshape(10000, width, height, 1).astype('float32') / 255.0

# y 값을 One-hot Encoding (0 ~ 9)
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

# Model 만들기

model = Sequential()

model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(width, height, 1)))
model.add(Conv2D(32, (3, 3), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(width, height, 1)))
model.add(Conv2D(32, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dropout(0.25))

model.add(Dense(10, activation='softmax'))

model.summary()

model.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])

hist = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test), verbose=1)

# 학습 과정을 그래프로 그려보기

import matplotlib.pyplot as plt

fig, loss_ax = plt.subplots()
acc_ax = loss_ax.twinx()

loss_ax.plot(hist.history['loss'], 'y', label = 'train loss')
loss_ax.plot(hist.history['val_loss'], 'r', label = 'val loss')

acc_ax.plot(hist.history['accuracy'], 'b', label = 'train acc')
acc_ax.plot(hist.history['val_accuracy'], 'g', label = 'val acc')

loss_ax.set_xlabel('Epoch')
loss_ax.set_ylabel('Loss')

acc_ax.set_ylabel('Accuracy')

loss_ax.legend(loc='upper left')
acc_ax.legend(loc='lower left')

plt.show()

yhat = model.predict(X_test, batch_size=32)

# 잘못 예측한 데이터 확인

import matplotlib.pyplot as plt

plt.rcParams["figure.figsize"] = (15, 18)
row = 5
col = 5

f, axarr = plt.subplots(row, col)
cnt = 0
i = 0

while cnt < (row * col) :
  if np.argmax(y_test[i] == yhat[i]):
    i = i + 1
    continue
  
  #답을 못 맞추었으므로 그림을 그려봄
  sub_plot = axarr[(int(cnt/row), int(cnt%col))]
  sub_plot.imshow(X_test[i].reshape(width, height))
  tmp = "C : " + labels[np.argmax(y_train[i])] + ', P : ' + labels[np.argmax(yhat[i])] # C는 정답, P는 예상
  sub_plot.set_title(tmp)

  i = i + 1
  cnt = cnt + 1

plt.show()

