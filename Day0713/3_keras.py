# -*- coding: utf-8 -*-
"""3_Keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GE2PE8dbsMkZORDl1_Bw4P2bdn2AM6Qv
"""

import tensorflow
import keras
import sklearn
import pandas
import numpy

print("Tensorflow Version : ", tensorflow.__version__)
print("keras Version : ", keras.__version__)
print("sklearn Version : ", sklearn.__version__)
print("pandas Version : ", pandas.__version__)
print("numpy Version : ", numpy.__version__)

from keras.models import Sequential
from keras.layers import Dense, Activation
import tensorflow as tf
import numpy as np

np.set_printoptions(precision=3) #소수점 3자리로 만든다

data = np.random.random((1000, 100)) #1000행 100열
label = np.random.randint(6, size = (1000, 1))

print("Input Shape : ", data.shape)
print("Output Shape :", label.shape)

print(data)

model = Sequential()
model.add(Dense(32, activation = "relu", input_dim = 100)) #100개가 들어와 32개의 결과물이 생김
model.add(Dense(1, activation="linear")) #32개가 들어와 1개의 결과물이 생김

model.summary()

# loss 함수 선정, 최적화 함수
model.compile(optimizer="sgd", loss="mse", metrics=['accuracy'])

# 학습시키기
model.fit(data, label, epochs=15, batch_size=16, verbose=1)

# 학습을 평가
score = model.evaluate(data, label, verbose=1)

print('Loss : ', score[0])
print('AccuracyLoss', score[1])

pred = model.predict(data)

